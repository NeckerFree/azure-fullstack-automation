name: Deploy API

on:
  workflow_run:
    workflows: ["Terraform CI/CD"]
    branches: [master]
    types: [completed]

env:
  NODE_VERSION: 16

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      # Configurar Terraform
      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Intentar descargar el inventory existente
      - name: 📥 Try Download Inventory Artifact
        id: download-inventory
        continue-on-error: true  # Continuar si falla
        uses: actions/download-artifact@v4
        with:
          name: ansible-inventory
          path: ./ansible/

      # Si la descarga falla, generar el inventory dinámicamente
      - name: 📝 Generate Inventory (Fallback)
        if: steps.download-inventory.outcome == 'failure'
        run: |
          CONTROL_IP=$(terraform -chdir=infra output -raw control_node_public_ip)
          SSH_USER=$(terraform -chdir=infra output -raw ssh_user)
          
          mkdir -p ./ansible
          cat > ./ansible/inventory.ini <<EOF
          [control]
          jumpbox ansible_host=$CONTROL_IP ansible_user=$SSH_USER ansible_ssh_private_key_file=/home/$SSH_USER/.ssh/vm_ssh_key

          [nodes]
          softdefault-vm-api-0 ansible_host=10.0.2.5 ansible_user=$SSH_USER ansible_ssh_private_key_file=/home/$SSH_USER/.ssh/vm_ssh_key ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          softdefault-vm-api-1 ansible_host=10.0.2.6 ansible_user=$SSH_USER ansible_ssh_private_key_file=/home/$SSH_USER/.ssh/vm_ssh_key ansible_ssh_common_args='-o StrictHostKeyChecking=no'

          [mysql_server]
          softdefault-vm-api-0
          softdefault-vm-api-1

          [all:vars]
          ansible_connection=ssh
          ansible_ssh_timeout=60
          ansible_python_interpreter=/usr/bin/python3
          EOF

          echo "Generated inventory.ini:"
          cat ./ansible/inventory.ini

      # Verificar que el inventory existe
      - name: 🔍 Verify Inventory
        run: |
          if [ ! -f "./ansible/inventory.ini" ]; then
            echo "❌ Error: inventory.ini not found"
            exit 1
          fi
          echo "Inventory contents:"
          cat ./ansible/inventory.ini

      # Configurar SSH
      - name: 🔑 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_ssh_key
          chmod 600 ~/.ssh/vm_ssh_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      # Resto de tus pasos...
      - name: 🚀 Deploy Ansible Configuration
        run: |
          chmod +x ./ansible/deploy-ansible-from-local.sh
          ./ansible/deploy-ansible-from-local.sh

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm ci
        working-directory: src/movie-analyst-api

      - name: 🧪 Run tests
        run: npm test
        working-directory: src/movie-analyst-api

      - name: 🗃️ Deploy Database
        run: | 
          chmod +x ./ansible/deploy-db-from-local.sh
          ./ansible/deploy-db-from-local.sh
          
      - name: 🚀 Deploy API
        run: |
          export DB_HOST="$(terraform -chdir=infra output -raw mysql_fqdn)"
          export DB_USER="$(terraform -chdir=infra output -raw mysql_admin_user)"
          export DB_PASS="$(terraform -chdir=infra output -raw mysql_admin_pwd)"
          export DB_NAME="$(terraform -chdir=infra output -raw mysql_database_name)"
          chmod +x ./ansible/deploy-api-from-local.sh
          ./ansible/deploy-api-from-local.sh