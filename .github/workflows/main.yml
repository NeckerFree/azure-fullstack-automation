name: Deploy API

on:
  workflow_run:
    workflows: ["Terraform CI/CD"]
    branches: [master]
    types: [completed]

env:
  NODE_VERSION: 16
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      # Set up Terraform first
      - name: üõ†Ô∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Set up Azure credentials
      - name: üîê Configure Azure Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Get Terraform outputs - reliable method
      - name: üõ†Ô∏è Get Terraform Outputs
        id: get-outputs
        run: |
          # Method 1: Try getting outputs directly (most reliable)
          echo "Getting outputs directly from Terraform..."
          terraform -chdir=infra init \
            -backend-config="resource_group_name=soft-tfstate-rg" \
            -backend-config="storage_account_name=softsastate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"
          
          # Get raw output and clean it
          terraform -chdir=infra output -json > infra/tf_outputs.raw
          # Extract just the JSON part (remove command line if present)
          grep -oP '\{.*\}' infra/tf_outputs.raw > infra/tf_outputs.json || cp infra/tf_outputs.raw infra/tf_outputs.json

          # Parse outputs with validation
          echo "Parsing outputs..."
          json=$(cat infra/tf_outputs.json)
          if ! jq -e '.mysql_fqdn.value' <<< "$json" >/dev/null; then
            echo "‚ùå Error: Invalid JSON or missing required fields"
            echo "File contents:"
            cat infra/tf_outputs.json
            exit 1
          fi

          echo "DB_HOST=$(jq -r '.mysql_fqdn.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_USER=$(jq -r '.mysql_admin_user.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_NAME=$(jq -r '.mysql_database_name.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_PASS<<EOF" >> $GITHUB_ENV
          echo "$(jq -r '.mysql_admin_pwd.value' <<< "$json")" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Verify outputs
      - name: ‚úÖ Verify Outputs
        run: |
          echo "Verifying infrastructure outputs..."
          echo "DB_HOST: $DB_HOST"
          echo "DB_USER: $DB_USER"
          echo "DB_NAME: $DB_NAME"
          
          if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASS" ] || [ -z "$DB_NAME" ]; then
            echo "‚ùå Error: Missing required environment variables"
            echo "Debug info:"
            ls -la infra/
            echo "File contents:"
            cat infra/tf_outputs.json
            exit 1
          fi

      # Rest of your steps...
      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install dependencies
        run: npm ci
        working-directory: src/movie-analyst-api

      - name: üß™ Run tests
        run: npm test
        working-directory: src/movie-analyst-api

      - name: üîë Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_ssh_key
          chmod 600 ~/.ssh/vm_ssh_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      - name: üì• Download inventory.ini artifact
        uses: actions/download-artifact@v4
        with:
          name: ansible-inventory
          path: ./ansible

      - name: üöÄ Run Deploy Script to Configure Ansible
        run: |
          chmod +x ./ansible/deploy-ansible-from-local.sh
          ./ansible/deploy-ansible-from-local.sh

      - name: üöÄ Run Deploy Script to configure DB
        run: | 
          chmod +x ./ansible/deploy-db-from-local.sh
          ./ansible/deploy-db-from-local.sh
          
      - name: üöÄ Run remote deploy script to deploy api
        run: |
          export DB_HOST="${{ env.DB_HOST }}"
          export DB_USER="${{ env.DB_USER }}"
          export DB_PASS="${{ env.DB_PASS }}"
          export DB_NAME="${{ env.DB_NAME }}"
          chmod +x ./ansible/deploy-api-from-local.sh
          ./ansible/deploy-api-from-local.sh