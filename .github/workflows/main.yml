name: Deploy API

on:
  workflow_run:
    workflows: ["Terraform CI/CD"]
    branches: [master]
    types: [completed]

env:
  NODE_VERSION: 16
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üì• Download inventory.ini artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}
          name: ansible-inventory
          path: ./ansible

      - name: üì• Download terraform-outputs artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}
          name: terraform-outputs
          path: ./infra

      - name: üïµÔ∏è Confirm inventory.ini exists
        run: |
          if [ ! -f ./ansible/inventory.ini ]; then
            echo "‚ùå ./ansible/inventory.ini not found!"
            ls -la ./ansible
            exit 1
          fi
          cat ./ansible/inventory.ini

      - name: ‚úÖ Parse Terraform Outputs
        run: |
          json=$(cat infra/tf_outputs.json)

          echo "DB_HOST=$(jq -r '.mysql_fqdn.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_USER=$(jq -r '.mysql_admin_user.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_NAME=$(jq -r '.mysql_database_name.value' <<< "$json")" >> $GITHUB_ENV
          echo "DB_PASS<<EOF" >> $GITHUB_ENV
          echo "$(jq -r '.mysql_admin_pwd.value' <<< "$json")" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üîë Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_ssh_key
          chmod 600 ~/.ssh/vm_ssh_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install dependencies
        run: npm ci
        working-directory: src/movie-analyst-api

      - name: üß™ Run tests
        run: npm test
        working-directory: src/movie-analyst-api

      - name: üöÄ Run Deploy Script to Configure Ansible
        run: |
          chmod +x ./ansible/deploy-ansible-from-local.sh
          ./ansible/deploy-ansible-from-local.sh

      - name: üöÄ Run Deploy Script to configure DB
        run: | 
          chmod +x ./ansible/deploy-db-from-local.sh
          ./ansible/deploy-db-from-local.sh

      - name: üöÄ Run remote deploy script to deploy api
        run: |
          export DB_HOST="${{ env.DB_HOST }}"
          export DB_USER="${{ env.DB_USER }}"
          export DB_PASS="${{ env.DB_PASS }}"
          export DB_NAME="${{ env.DB_NAME }}"
          chmod +x ./ansible/deploy-api-from-local.sh
          ./ansible/deploy-api-from-local.sh
