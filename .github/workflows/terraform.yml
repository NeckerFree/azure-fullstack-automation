name: Terraform CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  id-token: write

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: qa

    steps:
      # ... (todos tus pasos existentes hasta el final)

      - name: ðŸ“¦ Upload inventory.ini artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-inventory
          path: ./ansible/inventory.ini
          retention-days: 1

      - name: ðŸ”‘ Configure SSH for jumpbox
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_ssh_key
          chmod 600 ~/.ssh/vm_ssh_key
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      # Nuevo paso para subir el inventory al jumpbox
      - name: ðŸš€ Upload Inventory to Jumpbox
        run: |
          # Obtener credenciales del jumpbox
          JUMP_USER=$(jq -r '.ssh_user.value' infra/tf_outputs.json)
          JUMP_HOST=$(jq -r '.control_node_public_ip.value' infra/tf_outputs.json)

          # Crear directorio remoto si no existe
          ssh -i ~/.ssh/vm_ssh_key $JUMP_USER@$JUMP_HOST \
            "mkdir -p /home/$JUMP_USER/ansible-setup"

          # Subir el archivo inventory.ini
          scp -i ~/.ssh/vm_ssh_key \
            ./ansible/inventory.ini \
            $JUMP_USER@$JUMP_HOST:/home/$JUMP_USER/ansible-setup/inventory.ini

          # Verificar que se subiÃ³ correctamente
          ssh -i ~/.ssh/vm_ssh_key $JUMP_USER@$JUMP_HOST \
            "ls -la /home/$JUMP_USER/ansible-setup/"