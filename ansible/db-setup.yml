---
- name: Configure MySQL environment and database
  hosts: mysql_server
  become: yes
  vars:
    mysql_script_path: "/home/adminuser/movie_db.sql"
    remote_mysql_script_path: "/etc/ansible/mysql/movie_db.sql"

  tasks:
    - name: Ping MySQL host
      ping:

    - name: Ensure MySQL client is installed
      ansible.builtin.package:
        name: mysql-client
        state: present

    - name: Add environment variables to /etc/environment
      ansible.builtin.lineinfile:
        path: /etc/environment
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
        state: present
      loop:
        - { key: "DB_HOST", value: "{{ db_host }}" }
        - { key: "DB_USER", value: "{{ db_user }}" }
        - { key: "DB_PASS", value: "{{ db_pass }}" }
        - { key: "DB_NAME", value: "{{ db_name }}" }
      no_log: false

    - name: Ensure MySQL directory exists
      file:
        path: /etc/ansible/mysql
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy SQL script to MySQL directory
      copy:
        src: "{{ playbook_dir }}/files/mysql/movie_db.sql"
        dest: /etc/ansible/mysql/movie_db.sql
        owner: root
        group: root
        mode: "0644"


    - name: Handle MySQL database creation
      block:
        - name: Attempt to create database
          command: >
            mysql -h "{{ db_host }}" -u "{{ db_user }}" -p"{{ db_pass }}"
            -e "CREATE DATABASE IF NOT EXISTS {{ db_name }}; SELECT 'success' as status;"
          register: create_db
          no_log: false
          ignore_errors: yes
          changed_when: false  # We'll handle changes manually

        - name: Check if MySQL database exists
          command: >
            mysql -h "{{ db_host }}" -u "{{ db_user }}" -p"{{ db_pass }}"
            -e "SHOW DATABASES LIKE '{{ db_name }}';"
          register: db_check
          no_log: false
          ignore_errors: yes
          changed_when: false

        - name: Validate database creation
          fail:
            msg: "Failed to create database '{{ db_name }}'. Connection or permissions issue."
          when: >
            create_db is defined and db_check is defined and
            ('success' not in (create_db.stdout | default(''))) and
            ((db_check.stdout | default('')).find(db_name) == -1)
          no_log: false

      rescue:
        - name: Display database creation error
          debug:
            msg: "Database creation error: {{ create_db.stderr | default('Unknown error') }}"
          no_log: false

    - name: Load MySQL initialization script (run once)
      run_once: true
      shell: |
        mysql -h {{ db_host }} -u{{ db_user }} -p'{{ db_pass }}' {{ db_name }} < {{ remote_mysql_script_path }}
      args:
        executable: /bin/bash
      changed_when: false
      register: db_load_result

    - name: Verify database initialization
      run_once: true
      shell: |
        mysql -h "{{ db_host }}" -u"{{ db_user }}" -p"{{ db_pass }}" "{{ db_name }}" -e "SHOW TABLES;"
      register: db_check
      changed_when: false
      when: db_load_result.rc == 0

    - name: Fail if database initialization failed
      run_once: true
      fail:
        msg: "Database initialization failed with exit code {{ db_load_result.rc }}. Check the SQL script for errors."
      when: db_load_result.rc != 0 or db_check is skipped
