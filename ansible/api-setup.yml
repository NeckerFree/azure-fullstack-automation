---
- name: Setup and Deploy Node.js API
  hosts: nodes
  become: yes
  vars:
    admin_user: necker  # Override with --extra-vars or inventory
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o ConnectTimeout=30"
    ansible_ssh_retries: 3
    ansible_ssh_private_key_file: "~/.ssh/vm_ssh_key"

  pre_tasks:
    - name: Wait for SSH connectivity
      wait_for_connection:
        timeout: 60
        delay: 10
        sleep: 5

    - name: Set app path based on admin_user
      set_fact:
        app_path: "/home/{{ admin_user }}/ansible-setup/src/movie-analyst-api"

    - name: Show received DB environment variables
      debug:
        msg:
          - "DB_HOST: {{ db_host | default('null') }}"
          - "DB_USER: {{ db_user | default('null') }}"
          - "DB_PASS: {{ db_password | default('null') }}"
          - "DB_NAME: {{ db_name | default('null') }}"

  tasks:
    - name: Install system dependencies
      apt:
        name:
          - curl
          - gnupg
          - ca-certificates
          - npm
        state: present
        update_cache: yes

    - name: Remove old Node.js and npm if installed
      apt:
        name:
          - nodejs
          - npm
        state: absent
      ignore_errors: yes

    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add Node.js 16.x repo
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_16.x {{ ansible_distribution_release | lower }} main"
        state: present
        filename: nodesource

    - name: Install Node.js 16 and npm
      apt:
        name: nodejs
        state: present
        update_cache: yes

    - name: Check installed Node and npm versions
      shell: "node -v && npm -v"
      register: node_versions

    - name: Show versions
      debug:
        var: node_versions.stdout_lines

    - name: Ensure app directory exists
      file:
        path: "{{ app_path }}"
        state: directory
        mode: "0755"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"

    - name: Copy API code
      copy:
        src: "{{ app_path }}/"
        dest: "{{ app_path }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: "0755"

    - name: Install npm dependencies
      npm:
        path: "{{ app_path }}"
        state: present
        production: yes

    - name: Deploy systemd service
      template:
        src: "{{ playbook_dir }}/templates/movie-api.service.j2"
        dest: /etc/systemd/system/movie-api.service
        owner: root
        group: root
        mode: "0644"
      notify: restart movie-api

    - name: ðŸ“¦ Install dependencies with npm ci
      command: npm ci
      args:
        chdir: "{{ app_path }}"

    - name: ðŸ§ª Run tests with npm test
      command: npm test
      args:
        chdir: "{{ app_path }}"

  handlers:
    - name: restart movie-api
      systemd:
        name: movie-api
        state: restarted
        enabled: yes
        daemon_reload: yes
